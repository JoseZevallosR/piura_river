return(Inf)
}
q_obs <- load_demo(dataset = 'observation')
# Filter the observed data to match the simulation period
q_obs_filtered <- q_obs %>%
filter(date >= as.Date("2003-01-01") & date <= as.Date("2012-12-31"))
# Ensure simulated data aligns with observed data
if (nrow(q_obs_filtered) != nrow(q_sim$simulation$flo_out)) {
warning("Mismatch in observed and simulated data length.")
return(Inf)  # Return a large error value if lengths mismatch
}
# Extract simulated discharge
simulated <- q_sim$simulation$flo_out$run_1
# Calculate NSE (or another performance metric)
nse <- tryCatch(
{
-hydroGOF::NSE(sim = simulated, obs = q_obs_filtered$discharge)
},
error = function(e) {
message("Error calculating NSE: ", e$message)
return(Inf)  # Return a large error value if NSE calculation fails
}
)
# Print the cost function value
print(paste("Cost function value (NSE):", nse))
nse
}
maxIt <- 10
n <- 5
withParallel <- system.time( DEoptim(fn=objective_function, lower=lower_bounds, upper=upper_bounds,
control=list(NP=10*n, itermax=maxIt, parallelType=1)))
dim(q_obs)
result <- DEoptim(
fn = objective_function,
lower = lower_bounds,
upper = upper_bounds,
control = list(trace = TRUE, itermax = 10)
)
objective_function <- function(par) {
# Create a named vector for par_comb
par_comb <- c(
"cn2.hru | change = abschg | plant == 'corn'" = par[1],
"lat_ttime.hru | change = absval" = par[2],
"lat_len.hru | change = abschg" = par[3],
"epco.hru | change = absval" = par[4],
"esco.hru | change = absval" = par[5],
"perco.hru | change = absval" = par[6]
)
print(par_comb)  # Debugging step to inspect the parameter values
# Run the SWAT+ simulation with the parameter combination
q_sim <- tryCatch(
{
run_swatplus(
project_path = path_plus,
start_date = '2003-01-01',
end_date = '2012-12-31',
output = define_output(file = 'channel_sd_day', variable = 'flo_out', unit = 1),
parameter = par_comb, n_thread = 8
)
},
error = function(e) {
message("Error in SWAT+ simulation: ", e$message)
return(Inf)
}
)
# If simulation fails, return a large error value
if (is.null(q_sim)) {
return(Inf)
}
# Load the observed data
q_obs <- load_demo(dataset = 'observation')
# Filter the observed data to match the simulation period
q_obs_filtered <- q_obs %>%
filter(date >= as.Date("2003-01-01") & date <= as.Date("2012-12-31"))
# Ensure simulated data aligns with observed data
if (nrow(q_obs_filtered) != nrow(q_sim$simulation$flo_out)) {
warning("Mismatch in observed and simulated data length.")
return(Inf)  # Return a large error value if lengths mismatch
}
# Extract simulated discharge
simulated <- q_sim$simulation$flo_out$run_1
# Calculate RMSE
rmse <- tryCatch(
{
sqrt(mean((simulated - q_obs_filtered$discharge)^2, na.rm = TRUE))
},
error = function(e) {
message("Error calculating RMSE: ", e$message)
return(Inf)  # Return a large error value if RMSE calculation fails
}
)
# Print the cost function value
print(paste("Cost function value (RMSE):", rmse))
return(rmse)
}
result <- DEoptim(
fn = objective_function,
lower = lower_bounds,
upper = upper_bounds,
control = list(trace = TRUE, itermax = 10)
)
maxIt <- 10
n <- 5
withParallel <- system.time( DEoptim(fn=objective_function, lower=lower_bounds, upper=upper_bounds,
control=list(NP=10*n, itermax=maxIt, parallelType=1)))
library(doParallel)
# Register parallel backend (use all available cores minus one)
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)
# Run DEoptim in parallel
result <- DEoptim(
fn = objective_function,
lower = lower_bounds,
upper = upper_bounds,
control = DEoptim.control(
trace = TRUE,
itermax = 10,
parallelType = 2  # Use foreach for parallel processing
)
)
# Stop the parallel cluster after optimization is complete
stopCluster(cl)
objective_function <- function(par) {
# Create a named vector for par_comb
par_comb <- c(
"cn2.hru | change = abschg | plant == 'corn'" = par[1],
"lat_ttime.hru | change = absval" = par[2],
"lat_len.hru | change = abschg" = par[3],
"epco.hru | change = absval" = par[4],
"esco.hru | change = absval" = par[5],
"perco.hru | change = absval" = par[6]
)
print(par_comb)  # Debugging step to inspect the parameter values
# Run the SWAT+ simulation with the parameter combination
q_sim <- tryCatch(
{
run_swatplus(
project_path = path_plus,
start_date = '2003-01-01',
end_date = '2012-12-31',
output = define_output(file = 'channel_sd_day', variable = 'flo_out', unit = 1),
parameter = par_comb, n_thread = 8
)
},
error = function(e) {
message("Error in SWAT+ simulation: ", e$message)
return(Inf)
}
)
# If simulation fails, return a large error value
if (is.null(q_sim)) {
return(Inf)
}
# Load the observed data
q_obs <- load_demo(dataset = 'observation')
# Filter the observed data to match the simulation period
q_obs_filtered <- q_obs %>%
filter(date >= as.Date("2003-01-01") & date <= as.Date("2012-12-31"))
# Ensure simulated data aligns with observed data
if (nrow(q_obs_filtered) != nrow(q_sim$simulation$flo_out)) {
warning("Mismatch in observed and simulated data length.")
return(Inf)  # Return a large error value if lengths mismatch
}
# Extract simulated discharge
simulated <- q_sim$simulation$flo_out$run_1
# Calculate RMSE
rmse <- tryCatch(
{
sqrt(mean((simulated - q_obs_filtered$discharge)^2, na.rm = TRUE))
},
error = function(e) {
message("Error calculating RMSE: ", e$message)
return(Inf)  # Return a large error value if RMSE calculation fails
}
)
# Print the cost function value
print(paste("Cost function value (RMSE):", rmse))
return(rmse)
}
library(doParallel)
# Register parallel backend (use all available cores minus one)
cl <- makeCluster(detectCores() - 1)
clusterExport(cl, varlist = c("load_demo", "path_plus", "lower_bounds", "upper_bounds", "objective_function"))
registerDoParallel(cl)
clusterEvalQ(cl, {
library(dplyr)
library(hydroGOF)
# Load any other libraries used in the objective function
})
result <- DEoptim(
fn = objective_function,
lower = lower_bounds,
upper = upper_bounds,
control = DEoptim.control(
trace = TRUE,
itermax = 10,
parallelType = 2  # Use foreach for parallel processing
)
)
objective_function <- function(par) {
# Create a named vector for par_comb
par_comb <- c(
"cn2.hru | change = abschg | plant == 'corn'" = par[1],
"lat_ttime.hru | change = absval" = par[2],
"lat_len.hru | change = abschg" = par[3],
"epco.hru | change = absval" = par[4],
"esco.hru | change = absval" = par[5],
"perco.hru | change = absval" = par[6]
)
print(par_comb)  # Debugging step to inspect the parameter values
# Run the SWAT+ simulation with the parameter combination
q_sim <- tryCatch(
{
run_swatplus(
project_path = path_plus,
start_date = '2003-01-01',
end_date = '2012-12-31',
output = define_output(file = 'channel_sd_day', variable = 'flo_out', unit = 1),
parameter = par_comb, n_thread = 8
)
},
error = function(e) {
message("Error in SWAT+ simulation: ", e$message)
return(Inf)
}
)
# If simulation fails, return a large error value
if (is.null(q_sim)) {
return(Inf)
}
# Debugging: Check structure of q_sim
print("Structure of q_sim:")
print(str(q_sim))
# Ensure q_sim$simulation$flo_out exists and is a data frame
if (!("simulation" %in% names(q_sim)) || !is.data.frame(q_sim$simulation$flo_out)) {
message("q_sim$simulation$flo_out is missing or not a data frame")
return(Inf)
}
# Load the observed data
q_obs <- load_demo(dataset = 'observation')
# Filter the observed data to match the simulation period
q_obs_filtered <- q_obs %>%
filter(date >= as.Date("2003-01-01") & date <= as.Date("2012-12-31"))
# Debugging: Check structure of q_obs_filtered
print("Structure of q_obs_filtered:")
print(str(q_obs_filtered))
# Ensure simulated data aligns with observed data
if (nrow(q_obs_filtered) != nrow(q_sim$simulation$flo_out)) {
warning("Mismatch in observed and simulated data length.")
return(Inf)  # Return a large error value if lengths mismatch
}
# Extract simulated discharge
simulated <- q_sim$simulation$flo_out$run_1
# Check if simulated data is valid
if (is.null(simulated) || !is.numeric(simulated)) {
message("Simulated discharge is invalid or missing")
return(Inf)
}
# Calculate RMSE
rmse <- tryCatch(
{
sqrt(mean((simulated - q_obs_filtered$discharge)^2, na.rm = TRUE))
},
error = function(e) {
message("Error calculating RMSE: ", e$message)
return(Inf)  # Return a large error value if RMSE calculation fails
}
)
# Print the cost function value
print(paste("Cost function value (RMSE):", rmse))
return(rmse)
}
library(doParallel)
# Register parallel backend (use all available cores minus one)
cl <- makeCluster(detectCores() - 1)
clusterExport(cl, varlist = c("load_demo", "path_plus", "lower_bounds", "upper_bounds", "objective_function"))
registerDoParallel(cl)
clusterEvalQ(cl, {
library(dplyr)
library(hydroGOF)
# Load any other libraries used in the objective function
})
result <- DEoptim(
fn = objective_function,
lower = lower_bounds,
upper = upper_bounds,
control = DEoptim.control(
trace = TRUE,
itermax = 10,
parallelType = 2  # Use foreach for parallel processing
)
)
stopCluster(cl)
objective_function <- function(par) {
# Create a named vector for par_comb
par_comb <- c(
"cn2.hru | change = abschg | plant == 'corn'" = par[1],
"lat_ttime.hru | change = absval" = par[2],
"lat_len.hru | change = abschg" = par[3],
"epco.hru | change = absval" = par[4],
"esco.hru | change = absval" = par[5],
"perco.hru | change = absval" = par[6]
)
print(par_comb)  # Debugging step to inspect the parameter values
# Run the SWAT+ simulation with the parameter combination
q_sim <- tryCatch(
{
run_swatplus(
project_path = path_plus,
start_date = '2003-01-01',
end_date = '2012-12-31',
output = define_output(file = 'channel_sd_day', variable = 'flo_out', unit = 1),
parameter = par_comb, n_thread = 8
)
},
error = function(e) {
message("Error in SWAT+ simulation: ", e$message)
return(Inf)
}
)
# If simulation fails, return a large error value
if (is.null(q_sim)) {
return(Inf)
}
# Debugging: Check structure of q_sim
print("Structure of q_sim:")
print(str(q_sim))
# Ensure q_sim$simulation$flo_out exists and is a data frame
if (!("simulation" %in% names(q_sim)) || !is.data.frame(q_sim$simulation$flo_out)) {
message("q_sim$simulation$flo_out is missing or not a data frame")
return(Inf)
}
# Load the observed data
q_obs <- load_demo(dataset = 'observation')
# Filter the observed data to match the simulation period
q_obs_filtered <- q_obs %>%
filter(date >= as.Date("2003-01-01") & date <= as.Date("2012-12-31"))
# Debugging: Check structure of q_obs_filtered
print("Structure of q_obs_filtered:")
print(str(q_obs_filtered))
# Ensure simulated data aligns with observed data
if (nrow(q_obs_filtered) != nrow(q_sim$simulation$flo_out)) {
warning("Mismatch in observed and simulated data length.")
return(Inf)  # Return a large error value if lengths mismatch
}
# Extract simulated discharge
simulated <- q_sim$simulation$flo_out$run_1
# Check if simulated data is valid
if (is.null(simulated) || !is.numeric(simulated)) {
message("Simulated discharge is invalid or missing")
return(Inf)
}
# Calculate RMSE
rmse <- tryCatch(
{
sqrt(mean((simulated - q_obs_filtered$discharge)^2, na.rm = TRUE))
},
error = function(e) {
message("Error calculating RMSE: ", e$message)
return(Inf)  # Return a large error value if RMSE calculation fails
}
)
# Print the cost function value
print(paste("Cost function value (RMSE):", rmse))
print("q_sim$simulation$flo_out:")
print(q_sim$simulation$flo_out)
print("Simulated discharge (run_1):")
print(simulated)
print("Observed discharge (q_obs_filtered$discharge):")
print(q_obs_filtered$discharge)
return(rmse)
}
library(doParallel)
# Register parallel backend (use all available cores minus one)
cl <- makeCluster(detectCores() - 1)
clusterExport(cl, varlist = c("load_demo", "path_plus", "lower_bounds", "upper_bounds", "objective_function"))
registerDoParallel(cl)
clusterEvalQ(cl, {
library(dplyr)
library(hydroGOF)
# Load any other libraries used in the objective function
})
result <- DEoptim(
fn = objective_function,
lower = lower_bounds,
upper = upper_bounds,
control = DEoptim.control(
trace = TRUE,
itermax = 10,
parallelType = 2  # Use foreach for parallel processing
)
)
stopCluster(cl)
objective_function <- function(par) {
# Open log file for writing (append mode)
log_file <- file("debug_log.txt", open = "a")
writeLines(paste("Parameters:", paste(par, collapse = ", ")), log_file)
par_comb <- c(
"cn2.hru | change = abschg | plant == 'corn'" = par[1],
"lat_ttime.hru | change = absval" = par[2],
"lat_len.hru | change = abschg" = par[3],
"epco.hru | change = absval" = par[4],
"esco.hru | change = absval" = par[5],
"perco.hru | change = absval" = par[6]
)
writeLines(paste("par_comb:", paste(par_comb, collapse = ", ")), log_file)
# SWAT+ simulation
q_sim <- tryCatch(
{
run_swatplus(
project_path = path_plus,
start_date = '2003-01-01',
end_date = '2012-12-31',
output = define_output(file = 'channel_sd_day', variable = 'flo_out', unit = 1),
parameter = par_comb, n_thread = 8
)
},
error = function(e) {
writeLines(paste("Error in SWAT+ simulation:", e$message), log_file)
close(log_file)
return(NULL)
}
)
if (is.null(q_sim)) {
close(log_file)
return(Inf)
}
q_obs <- load_demo(dataset = 'observation')
q_obs_filtered <- q_obs %>%
filter(date >= as.Date("2003-01-01") & date <= as.Date("2012-12-31"))
if (nrow(q_obs_filtered) != nrow(q_sim$simulation$flo_out)) {
writeLines("Mismatch in observed and simulated data lengths.", log_file)
close(log_file)
return(Inf)
}
simulated <- q_sim$simulation$flo_out$run_1
if (anyNA(simulated) || anyNA(q_obs_filtered$discharge)) {
writeLines("Invalid values in simulated or observed data.", log_file)
close(log_file)
return(Inf)
}
# Calculate RMSE
rmse <- sqrt(mean((simulated - q_obs_filtered$discharge)^2, na.rm = TRUE))
writeLines(paste("RMSE:", rmse), log_file)
# Close log file and return RMSE
close(log_file)
return(rmse)
}
library(doParallel)
# Register parallel backend (use all available cores minus one)
cl <- makeCluster(detectCores() - 1)
clusterExport(cl, varlist = c("load_demo", "path_plus", "lower_bounds", "upper_bounds", "objective_function"))
registerDoParallel(cl)
clusterEvalQ(cl, {
library(dplyr)
library(hydroGOF)
# Load any other libraries used in the objective function
})
result <- DEoptim(
fn = objective_function,
lower = lower_bounds,
upper = upper_bounds,
control = DEoptim.control(
trace = TRUE,
itermax = 10,
parallelType = 2  # Use foreach for parallel processing
)
)
q_obs_filtered
# Filter the observed data to match the simulation period
q_obs_filtered <- q_obs %>%
filter(date >= as.Date("2003-01-01") & date <= as.Date("2012-12-31"))
length(q_obs_filtered)
dim(q_obs_filtered)
q_obs_filtered$discharge
# Filter the observed data to match the simulation period
q_obs_filtered <- q_obs %>%
filter(date >= as.Date("2003-01-01") & date <= as.Date("2005-12-31"))
q_obs_filtered$discharge
# Filter the observed data to match the simulation period
q_obs_filtered <- q_obs %>%
filter(date >= as.Date("2003-01-01") & date <= as.Date("2005-12-31"))
q_obs
q_obs_filtered
# Filter the observed data to match the simulation period
q_obs_filtered <- q_obs %>%
filter(date >= as.Date("2003-01-01") & date <= as.Date("2004-12-31"))
q_obs_filtered
q_obs_filtered$discharge
q_obs_filtered <- c(
1.24, 0.78, 0.46, 0.41, 0.32, 0.32, 0.26, 0.25, 0.25, 0.24, 0.21, 0.18, 0.20, 0.44,
0.36, 0.28, 0.17, 0.14, 0.13, 0.13, 0.13, 0.14, 0.14, 0.12, 0.11, 0.10, 0.10, 0.10,
0.09, 0.10, 0.10, 0.10, 0.09, 0.08, 0.09, 0.09, 0.09, 0.38, 0.31, 0.17, 0.22, 0.37,
0.32, 0.29, 0.26, 0.13, 0.40, 0.73, 0.36, 0.27, 0.21, 0.17, 0.55, 0.60, 0.34, 0.23,
0.22, 0.71, 0.82, 0.85, 1.76, 1.24, 1.03, 0.85, 0.73, 0.89, 1.17, 0.83, 0.59, 0.42,
0.34, 0.58, 0.64, 0.54, 0.62, 0.74, 1.74, 1.40, 3.32, 2.47, 1.49, 0.82, 0.55, 0.47,
0.32, 0.27, 0.26, 0.24, 0.27, 0.26, 0.35, 0.34, 0.18, 0.13, 0.13, 0.14, 0.18, 1.80,
3.55, 2.65, 1.71, 0.98, 0.63, 0.42, 0.27, 0.17, 0.16, 0.15, 0.13, 0.15, 0.14, 0.12,
0.09, 0.07, 0.42, 1.13, 0.53, 0.31, 0.19, 0.10, 0.13, 0.10, 0.26, 0.26, 0.14, 0.19,
0.08, 0.05, 0.06, 0.03, 0.03, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.01, 0.02, 0.02,
0.01, 0.34, 0.86, 0.41, 0.27, 0.07, 0.04, 0.03, 0.02, 0.01, 0.01, 0.00, 0.00, 0.00,
0.00, 0.00, 0.00, 0.17, 0.32, 0.10, 0.05, 0.11, 0.07, 0.07, 0.09, 0.05, 0.03, 0.33,
0.21, 0.15, 0.17, 0.66, 0.47, 0.39, 0.37, 0.18, 0.04, 0.02, 0.01, 0.01, 0.01, 0.03,
0.51, 0.30, 0.14, 0.09, 0.07, 0.10, 0.09, 0.04, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01,
0.02, 0.10, 0.13, 0.04, 0.02, 0.01, 0.05, 0.55, 0.63, 0.28, 0.18, 0.06, 0.04, 0.03,
0.17, 0.40, 0.63, 0.73, 0.28, 0.80, 0.89, 0.40, 0.48, 0.49, 0.24, 0.15, 0.11, 0.12,
0.23, 0.14, 0.16, 0.13, 0.06, 0.05, 0.19, 0.56, 0.15, 0.10, 0.07, 0.05, 0.04, 0.03,
0.02, 0.15, 0.14, 0.11, 0.06, 0.03, 0.05, 0.10, 0.12, 0.04, 0.07, 0.07, 0.05, 0.03,
0.02, 0.01, 0.03, 0.02, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.01,
...
# Continue with the rest of the data
)
