# Realizar el ANOVA para comparar las puntuaciones de "mindfulness" antes y después del entrenamiento
anova_mindfulness <- aov(FollowUp.trait.mindfulnessscore ~ Group, data = data)
summary(anova_mindfulness)
# Load necessary library
library(dplyr)
# Original data extracted from the image
data <- data.frame(
Variable = c("Nmin_N0", "Nmin_N20", "Nmin_N40", "Nmin_N60", "Nmin_N80",
"NO3_N0", "NO3_N20", "NO3_N40", "NO3_N60", "NO3_N80",
"NH4_N_N0", "NH4_N_N20", "NH4_N_N40", "NH4_N_N60", "NH4_N_N80",
"WFPS_N0", "WFPS_N20", "WFPS_N40", "WFPS_N60", "WFPS_N80"),
Mean = c(30.4, 29.0, 26.7, 26.9, 32.8,
4.8, 5.5, 4.4, 4.4, 6.5,
25.6, 23.5, 21.3, 22.5, 26.3,
59.9, 56.3, 56.6, 58.8, 56.5),
StdDev = c(1.8, 2.3, 1.2, 1.9, 4.3,
1.3, 0.5, 0.4, 1.1, 1.1,
0.9, 1.9, 1.2, 1.2, 3.4,
1.6, 1.3, 1.9, 1.0, 2.6)
)
# Create new columns for mean - std, mean, and mean + std
data <- data %>%
mutate(Mean_minus_SD = Mean - StdDev,
Mean_plus_SD = Mean + StdDev)
# Select and reorder the columns for clarity
result_df <- data %>%
select(Variable, Mean_minus_SD, Mean, Mean_plus_SD)
# Display the resulting data frame
print(result_df)
# Crear el dataframe
data <- data.frame(
Fecha = rep("2018-05-29", times = 5 * 4),
Tratamiento = rep(c("N0", "N20", "N40", "N60", "N80"), each = 4),
Variable = rep(c("Nmin", "NO3-N", "NH4+-N", "WFPS"), times = 5),
Valor = c(30.4, 4.8, 25.6, 59.9,  # Valores para N0
29.0, 5.5, 23.5, 56.3,  # Valores para N20
26.7, 4.4, 21.3, 56.6,  # Valores para N40
26.9, 4.4, 22.5, 58.8,  # Valores para N60
32.8, 6.5, 26.3, 56.5)  # Valores para N80
)
# Mostrar el dataframe
print(data)
# Crear el dataframe original con los valores medios y la desviación estándar
data <- data.frame(
Tratamiento = c("N0", "N20", "N40", "N60", "N80"),
Nmin_mean = c(30.4, 29.0, 26.7, 26.9, 32.8),
Nmin_sd = c(1.8, 2.3, 1.2, 1.9, 4.3),
NO3_mean = c(4.8, 5.5, 4.4, 4.4, 6.5),
NO3_sd = c(1.3, 0.5, 0.4, 1.1, 1.1),
NH4_mean = c(25.6, 23.5, 21.3, 22.5, 26.3),
NH4_sd = c(0.9, 1.9, 1.2, 1.2, 3.4),
WFPS_mean = c(59.9, 56.3, 56.6, 58.8, 56.5),
WFPS_sd = c(1.6, 1.3, 1.9, 1.0, 2.6)
)
# Crear un dataframe vacío para almacenar los resultados
data_expanded <- data.frame()
# Iterar sobre cada fila del dataframe original y crear las repeticiones
for (i in 1:nrow(data)) {
# Para cada variable (Nmin, NO3-N, NH4+-N, WFPS), generar las tres repeticiones
temp <- data.frame(
Fecha = rep("2018-05-29", 12),
Tratamiento = rep(data$Tratamiento[i], 12),
Variable = rep(c("Nmin", "NO3-N", "NH4+-N", "WFPS"), each = 3),
Valor = c(
data$Nmin_mean[i] - data$Nmin_sd[i], data$Nmin_mean[i], data$Nmin_mean[i] + data$Nmin_sd[i],
data$NO3_mean[i] - data$NO3_sd[i], data$NO3_mean[i], data$NO3_mean[i] + data$NO3_sd[i],
data$NH4_mean[i] - data$NH4_sd[i], data$NH4_mean[i], data$NH4_mean[i] + data$NH4_sd[i],
data$WFPS_mean[i] - data$WFPS_sd[i], data$WFPS_mean[i], data$WFPS_mean[i] + data$WFPS_sd[i]
)
)
# Añadir los datos temporales al dataframe expandido
data_expanded <- rbind(data_expanded, temp)
}
# Mostrar el dataframe resultante
print(data_expanded)
# Asegurarse de que los factores estén correctamente definidos
data_expanded$Tratamiento <- as.factor(data_expanded$Tratamiento)
data_expanded$Variable <- as.factor(data_expanded$Variable)
# Filtrar los datos para una variable específica, por ejemplo, "Nmin"
data_Nmin <- data_expanded %>% filter(Variable == "Nmin")
# Realizar el ANOVA para la variable "Nmin"
anova_Nmin <- aov(Valor ~ Tratamiento, data = data_Nmin)
summary(anova_Nmin)
datos = read.csv("Doctorado/2024-II/FACTORIAL.csv",sep = ';')
datos
View(data_expanded)
# Asegurarse de que los factores estén correctamente definidos
data_expanded$Tratamiento <- as.factor(data_expanded$Tratamiento)
data_expanded$Variable <- as.factor(data_expanded$Variable)
res.aov <- aov(Valor ~ Tratamiento+Variable  , data = data_expanded)
summary(res.aov)
TukeyMetodo <- HSD.test(res.aov)
TukeyMetodo <- TukeyHSD(res.aov)
TukeyMetodo
datos = read.csv("Doctorado/2024-II/FACTORIAL.csv",sep = ';')
colnames(datos)
datos$Profundidad = as.factor(datos$Profundidad)
datos$Velocidad = as.factor(datos$Velocidad)
res.aov <- aov(Acabado ~ Velocidad+Profundidad + Profundidad *Velocidad  , data = datos)
summary(anova_selfcompassion)
summary(res.aov)
residuos = anova_selfcompassion$residuals
shapiro.test(x = residuos)
plot(res.aov)
plot(tukeyMetodo1,variation="IQR")
tukeyMetodo1 = HSD.test(res.aov,"Profundida", alpha =0.05, group=T)
library(lmtest)
dwtest(res.aov)
library(agricolae)
tukeyMetodo1 = HSD.test(res.aov,"Profundida", alpha =0.05, group=T)
plot(tukeyMetodo1,variation="IQR")
plot(tukeyMetodo1,variation="IQR")
TukeyMetodo <- TukeyHSD(res.aov)
res.aov <- aov(Valor ~ Tratamiento+Variable  , data = data_expanded)
summary(res.aov)
TukeyMetodo <- TukeyHSD(res.aov)
TukeyMetodo
plot(tukeyMetodo1,variation="IQR")
TukeyMetodo
plot(tukeyMetodo1,variation="IQR")
plot(tukeyMetodo1,variation="IQR")
plot(tukeyMetodo,variation="IQR")
plot(TukeyMetodo,variation="IQR")
tukeyMetodo1 = HSD.test(res.aov,"Tratamiento", alpha =0.05, group=T)
plot(tukeyMetodo1,variation="IQR")
tukeyMetodo1 = HSD.test(res.aov,"Variable", alpha =0.05, group=T)
tukeyMetodo2 = HSD.test(res.aov,"Variable", alpha =0.05, group=T)
plot(tukeyMetodo2,variation="IQR")
tukeyMetodo1 = HSD.test(res.aov,"Tratamiento", alpha =0.05, group=T)
plot(tukeyMetodo1,variation="IQR")
View(data)
View(data_expanded)
library(ggplot2)
intEf <- aggregate(Valor ~ Tratamiento + Variable,
FUN = mean, data = data_expanded)
effects_interaction <- ggplot(intEf, aes(x = Tratamiento, y = Valor, color = Variable)) +
geom_point() +
geom_line(aes(group = Variable))
effects_interaction
# Calcular los valores promedio por tratamiento y variable
intEf <- aggregate(Valor ~ Tratamiento + Variable, FUN = mean, data = data_expanded)
# Crear el gráfico con las unidades añadidas
effects_interaction <- ggplot(intEf, aes(x = Tratamiento, y = Valor, color = Variable)) +
geom_point() +
geom_line(aes(group = Variable)) +
labs(
y = "Valor (kg N ha⁻¹ para Nmin, NH4+-N, NO3-N; % para WFPS)",
x = "Tratamiento",
color = "Variable (Unidad)"
) +
scale_color_manual(
values = c("NH4+-N" = "red", "Nmin" = "green", "NO3-N" = "blue", "WFPS" = "purple"),
labels = c(
"NH4+-N (kg N ha⁻¹)",
"Nmin (kg N ha⁻¹)",
"NO3-N (kg N ha⁻¹)",
"WFPS (%)"
)
)
# Mostrar el gráfico
effects_interaction
# Cargar librerías necesarias
library(dplyr)
library(agricolae)
library(car) # Para la verificación de suposiciones
# Crear el dataframe original con los valores medios y la desviación estándar para cada variable
data <- data.frame(
Intensidad_Pastoreo = c("G0", "G0.7", "G1.2", "G1.6"),
P_mean = c(0.86, 1.74, 1.14, 1.42),
P_sd = c(0.04, 0.08, 0.04, 0.12),
NO3_mean = c(0.07, 0.12, 0.10, 0.08),
NO3_sd = c(0.004, 0.006, 0.008, 0.01),
NH4_mean = c(1.26, 1.13, 1.22, 1.37),
NH4_sd = c(0.08, 0.06, 0.06, 0.11)
)
# Crear un dataframe vacío para almacenar los resultados
data_expanded <- data.frame()
# Iterar sobre cada fila del dataframe original y crear las repeticiones
for (i in 1:nrow(data)) {
# Para cada variable (P, NO3-N, NH4+-N), generar las tres repeticiones
temp <- data.frame(
Fecha = rep("2013", 9),  # Ajuste de fecha para el año del estudio
Intensidad_Pastoreo = rep(data$Intensidad_Pastoreo[i], 9),
Psuelo = rep(c("P", "NO3-N", "NH4+-N"), each = 3),
Valor = c(
data$P_mean[i] - data$P_sd[i], data$P_mean[i], data$P_mean[i] + data$P_sd[i],
data$NO3_mean[i] - data$NO3_sd[i], data$NO3_mean[i], data$NO3_mean[i] + data$NO3_sd[i],
data$NH4_mean[i] - data$NH4_sd[i], data$NH4_mean[i], data$NH4_mean[i] + data$NH4_sd[i]
)
)
# Añadir los datos temporales al dataframe expandido
data_expanded <- rbind(data_expanded, temp)
}
# Mostrar el dataframe expandido
print(data_expanded)
View(data)
View(data_expanded)
data_expanded$Fecha = NULL
# Ordenar el dataframe expandido por la columna "Variable"
data_expanded <- arrange(data_expanded, Psuelo)
# Reorganizar las columnas para que "Variable" sea la primera
data_expanded <- select(data_expanded, Psuelo, everything())
View(data_expanded)
View(data_expanded)
# Mostrar el dataframe resultante
print(data_expanded)
# Asegurarse de que los factores estén correctamente definidos
data_expanded$Intensidad_Pastoreo <- as.factor(data_expanded$Intensidad_Pastoreo)
data_expanded$Psuelo <- as.factor(data_expanded$Psuelo)
# Anova para DBCA
res.aov <- aov(Valor ~ Intensidad_Pastoreo + Psuelo, data = data_expanded)
summary(res.aov)
shapiro.test(aov_residuals)
# Si hay normalidad en nuestros datos
aov_residuals = residuals(res.aov)
shapiro.test(aov_residuals)
bartlett.test(Valor ~ Intensidad_Pastoreo, data = data_expanded)
bartlett.test(Valor ~ Psuelo, data = data_expanded)
# Durbin-Watson test
lmtest::dwtest(res.aov)
# Cargar librerías necesarias
library(dplyr)
library(agricolae)
library(car) # Para la verificación de suposiciones
# Crear el dataframe original con los valores medios y la desviación estándar para cada variable
data <- data.frame(
Intensidad_Pastoreo = c("G0", "G0.7", "G1.2", "G1.6"),
P_mean = c(0.86, 1.74, 1.14, 1.42),
P_sd = c(0.04, 0.08, 0.04, 0.12),
NO3_mean = c(0.07, 0.12, 0.10, 0.08),
NO3_sd = c(0.004, 0.006, 0.008, 0.01),
NH4_mean = c(1.26, 1.13, 1.22, 1.37),
NH4_sd = c(0.08, 0.06, 0.06, 0.11)
)
# Crear un dataframe vacío para almacenar los resultados
data_expanded <- data.frame()
# Iterar sobre cada fila del dataframe original y crear las repeticiones
for (i in 1:nrow(data)) {
# Para cada variable (P, NO3-N, NH4+-N), generar las tres repeticiones
temp <- data.frame(
Fecha = rep("2013", 9),  # Ajuste de fecha para el año del estudio
Intensidad_Pastoreo = rep(data$Intensidad_Pastoreo[i], 9),
Psuelo = rep(c("P", "NO3-N", "NH4+-N"), each = 3),
Valor = c(
data$P_mean[i] - data$P_sd[i], data$P_mean[i], data$P_mean[i] + data$P_sd[i],
data$NO3_mean[i] - data$NO3_sd[i], data$NO3_mean[i], data$NO3_mean[i] + data$NO3_sd[i],
data$NH4_mean[i] - data$NH4_sd[i], data$NH4_mean[i], data$NH4_mean[i] + data$NH4_sd[i]
)
)
# Añadir los datos temporales al dataframe expandido
data_expanded <- rbind(data_expanded, temp)
}
# Mostrar el dataframe expandido
print(data_expanded)
data_expanded$Fecha = NULL
# Ordenar el dataframe expandido por la columna "Variable"
data_expanded <- arrange(data_expanded, Psuelo)
# Reorganizar las columnas para que "Variable" sea la primera
data_expanded <- select(data_expanded, Psuelo, everything())
# Mostrar el dataframe resultante
print(data_expanded)
# Asegurarse de que los factores estén correctamente definidos
data_expanded$Intensidad_Pastoreo <- as.factor(data_expanded$Intensidad_Pastoreo)
data_expanded$Psuelo <- as.factor(data_expanded$Psuelo)
# Anova para DBCA
res.aov <- aov(Valor ~ Intensidad_Pastoreo + Psuelo, data = data_expanded)
summary(res.aov)
# Si hay normalidad en nuestros datos
aov_residuals = residuals(res.aov)
shapiro.test(aov_residuals)
# QQ-plot para verificar normalidad
qqPlot(aov_residuals, main = "QQ-Plot de Residuos")
bartlett.test(Valor ~ Intensidad_Pastoreo, data = data_expanded)
bartlett.test(Valor ~ Psuelo, data = data_expanded)
# Durbin-Watson test
lmtest::dwtest(res.aov)
tukeyMetodo1 = HSD.test(res.aov, "Intensidad_Pastoreo", alpha = 0.05, group = T)
plot(tukeyMetodo1, variation = "IQR")
tukeyMetodo1
print(tukeyMetodo1)
tukeyMetodo2 = HSD.test(res.aov, "Psuelo", alpha = 0.05, group = T)
print(tukeyMetodo2)
tukeyMetodo2 = HSD.test(res.aov, "Psuelo", alpha = 0.05, group = T)
plot(tukeyMetodo2, variation = "IQR")
plot(tukeyMetodo1, variation = "IQR")
tukeyMetodo1 = HSD.test(res.aov, "Intensidad_Pastoreo", alpha = 0.05, group = T)
tukeyMetodo1
2600/4
# Cargamos las librerías necesarias
library(tidyr)
library(dplyr)
library(agricolae)
# Cargar la librería ggplot2
library(ggplot2)
library(lmtest)
library(car) # Para la verificación de suposiciones
# Crear el dataframe original con los valores medios y la desviación estándar
data <- data.frame(
Tratamiento = c("N0", "N20", "N40", "N60", "N80"),
Nmin_mean = c(30.4, 29.0, 26.7, 26.9, 32.8),
Nmin_sd = c(1.8, 2.3, 1.2, 1.9, 4.3),
NO3_mean = c(4.8, 5.5, 4.4, 4.4, 6.5),
NO3_sd = c(1.3, 0.5, 0.4, 1.1, 1.1),
NH4_mean = c(25.6, 23.5, 21.3, 22.5, 26.3),
NH4_sd = c(0.9, 1.9, 1.2, 1.2, 3.4)
)
# Crear un dataframe vacío para almacenar los resultados
data_expanded <- data.frame()
# Iterar sobre cada fila del dataframe original y crear las repeticiones
for (i in 1:nrow(data)) {
# Para cada variable (Nmin, NO3-N, NH4+-N), generar las tres repeticiones
temp <- data.frame(
Fecha = rep("2018-05-29", 9),
Tratamiento = rep(data$Tratamiento[i], 9),
Variable = rep(c("Nmin", "NO3-N", "NH4+-N"), each = 3),
Valor = c(
data$Nmin_mean[i] - data$Nmin_sd[i], data$Nmin_mean[i], data$Nmin_mean[i] + data$Nmin_sd[i],
data$NO3_mean[i] - data$NO3_sd[i], data$NO3_mean[i], data$NO3_mean[i] + data$NO3_sd[i],
data$NH4_mean[i] - data$NH4_sd[i], data$NH4_mean[i], data$NH4_mean[i] + data$NH4_sd[i]
)
)
# Añadir los datos temporales al dataframe expandido
data_expanded <- rbind(data_expanded, temp)
}
data_expanded$Fecha = NULL
# Ordenar el dataframe expandido por la columna "Variable"
data_expanded <- arrange(data_expanded, Variable)
# Reorganizar las columnas para que "Variable" sea la primera
data_expanded <- select(data_expanded, Variable, everything())
# Mostrar el dataframe resultante
print(data_expanded)
datos_largos =  data_expanded
names(datos_largos) = c('Emisores','Tratamiento','N2O')
datos_largos$Emisores = as.factor(datos_largos$Emisores)
#Anova
res.aov <- aov(N2O ~ Emisores, data = datos_largos)
summary(res.aov)
# Si hay normalidad en nuestros datos
aov_residuals = residuals(res.aov)
shapiro.test(aov_residuals) #datos normales ya que p valor + 0.05
#QQ-plot para verificar normalidad
qqPlot(aov_residuals, main = "QQ-Plot de Residuos")
bartlett.test(N2O ~ Emisores, data = datos_largos) #homoceasticidad
#Durbin-Watson test
lmtest::dwtest(res.aov) # no hay autocorrelacion
tukeyMetodo2 = HSD.test(res.aov,"Emisores", alpha =0.05, group=T)
plot(tukeyMetodo2,variation="IQR")
View(datos_largos)
grouped_data <- datos_largos %>%
group_by(Emisores) %>%
summarise(y_bar_i = mean(N2O), S_i = sd(N2O))
grouped_data
grouped_data <- grouped_data %>%
mutate(ln_y_bar_i = log(y_bar_i), ln_S_i = log(S_i))
# Plot ln(S_i) against ln(y_bar_i)
plot(grouped_data$ln_y_bar_i, grouped_data$ln_S_i,
xlab = expression(ln(bar(y)[i])), ylab = expression(ln(S[i])),
main = "Plot of ln(S_i) against ln(y_bar_i)",
pch = 19, col = "blue")
# Adding a linear regression line
model <- lm(ln_S_i ~ ln_y_bar_i, data = grouped_data)
abline(model, col = "red")
print(model)
# Extract coefficients
intercept <- round(coef(model)[1], 2)  # intercept
slope <- round(coef(model)[2], 2)      # slope
# Create the equation text
equation <- paste0("ln(S_i) = ", intercept, " + ", slope, " * ln(y_bar_i)")
# Add the equation to the plot
text(x = min(grouped_data$ln_y_bar_i), y = max(grouped_data$ln_S_i),
labels = equation, pos = 4, col = "red")
# Calculate alpha and lambda
alpha <- model$coefficients[2]
landa <- 1 - alpha
landa
datos_largos$transform = sqrt(datos_largos$N2O)
datos_largos$Emisores = as.factor(datos_largos$Emisores)
res.aov2 <- aov(transform ~ Emisores, data = datos_largos)
datos=read.table("1. Correlacion.csv", header = T,  sep=";",  dec="."     )
if (!requireNamespace("terra")) install.packages("terra")
# Instalar paquetes si es necesario
if (!requireNamespace("raster")) install.packages("raster")
if (!requireNamespace("sf")) install.packages("sf")
if (!requireNamespace("terra")) install.packages("terra")
# Cargar librerías
library(raster)
library(sf)
library(terra)
# Crear un raster de ejemplo
r <- raster(ncol=10, nrow=10, xmn=0, xmx=10, ymn=0, ymx=10)
values(r) <- 1:ncell(r)  # Asignar valores al raster
# Crear un polígono de ejemplo con coordenadas fuera de los límites del raster
coords <- matrix(c(8, 12, 12, 8, 8, 8, 4, 4, 8), ncol=2, byrow=TRUE)
pol <- st_polygon(list(coords))
# Crear un polígono de ejemplo con coordenadas fuera de los límites del raster
coords <- matrix(c(8, 12, 12, 8, 8, 8, 4, 4, 8), ncol=2, byrow=TRUE)
pol <- st_polygon(list(coords))
setwd("~/GitHub/piura_river/data/cuenca/LAND USE")
setwd("~/GitHub/piura_river/data/cuenca/")
cuenca = shapefile("SHAPE/wgs_84_shape.shp")
soil = raster("LAND_USE/LAND_USE_17S_cortado.tif")
plot(soil, add = T)
plot(soil)
plot(soil, add = T)
plot(soil)
plot(cuenca, add = T)
# Usar fillNA para asignar el vecino más cercano directo
soil_filled <- terra::fillNA(soil)
# Visualizar
plot(soil_filled, main = "Relleno directo con vecino más cercano")
# Usar fillNA para asignar el vecino más cercano directo
soil_filled <- terra::fillNA(soil)
terra::focal?
?terra::focal
# Usar fillNA para asignar el vecino más cercano directo
soil_filled <- terra::focal(soil,w = 3, fun = "modal",na.policy="only")
# Usar fillNA para asignar el vecino más cercano directo
soil_filled <- terra::focal(soil, fun = "modal",na.policy="only")
# Usar fillNA para asignar el vecino más cercano directo
soil_filled <- terra::focal(soil,w = 1, fun = "modal",na.policy="only")
# Usar fillNA para asignar el vecino más cercano directo
soil_filled <- terra::focal(soil, fun = "modal",na.policy="only")
# Rellenar los NA con el valor más frecuente (modal) de los vecinos más cercanos (3x3)
soil_filled <- terra::focal(soil, w = matrix(1, 3, 3), fun = "modal", na.policy = "only", fillvalue = NA)
# Visualización
plot(soil_filled, main = "Raster con NA rellenados por el vecino más frecuente")
# Rellenar los NA con el valor más frecuente (modal) de los vecinos más cercanos (3x3)
soil_filled <- terra::focal(soil, w = matrix(1, 3, 3), fun = "modal", na.policy = "only", fillvalue = NA)
# Rellenar los NA con el valor más frecuente (modal)
soil_filled <- terra::focal(soil, w = matrix(1, 3, 3), fun = function(x) modal(x, ties = "random"), na.policy = "only")
# Visualización
plot(soil_filled, main = "Raster con NA rellenados por la moda")
plot(cuenca, add = T)
?soil_filled
soil_filled
# Función para rellenar NA con moda de los vecinos más cercanos
fill_na_iterativo <- function(r) {
while (any(is.na(values(r)))) {  # Mientras existan NA
r <- focal(r, w = matrix(1, 3, 3), fun = function(x) modal(x, ties = "random"), na.policy = "only")
}
return(r)
}
# Aplicar la función al raster
soil_filled_total <- fill_na_iterativo(soil)
# Interpolar valores NA usando interpolación bilineal
soil_filled_bilineal <- interpolate(soil, method = "bilinear")
# Cargar librería
library(terra)
# Rellenar usando proyección bilineal (interpolación)
soil_filled_bilineal <- terra::project(soil, crs(soil), method = "bilinear")
# Visualización
plot(soil_filled_bilineal, main = "Relleno con interpolación bilineal")
soil@data
values(soil)
# Cargar librería
library(terra)
# Función para rellenar NA con vecino más cercano
fill_na_nearest <- function(raster, max_iter = 10) {
for (i in 1:max_iter) {
if (all(!is.na(values(raster)))) {
break  # Detener si no quedan NA
}
raster <- focal(raster, w = matrix(1, 3, 3), fun = function(x) {
if (is.na(x[5])) {  # Si el centro es NA
return(modal(x, ties = "random"))  # Moda de los vecinos
} else {
return(x[5])  # Si no es NA, mantener el valor original
}
}, na.policy = "only")
}
return(raster)
}
# Aplicar la función al raster
soil_filled <- fill_na_nearest(soil)
# Visualización
plot(soil_filled, main = "Raster rellenado con vecino más cercano")
plot(cuenca, add = T)
plot(soil)
plot(cuenca, add = T)
values(soil_filled)
# Función para rellenar celdas NA con el vecino más cercano sin usar focal()
fill_na_nearest_no_focal <- function(raster, max_iter = 10) {
for (i in 1:max_iter) {
na_cells <- which(is.na(values(raster)))  # Índices de las celdas NA
if (length(na_cells) == 0) {
break  # Si ya no hay NA, terminar
}
for (cell in na_cells) {
# Buscar vecinos del píxel NA
neighbors <- adjacent(raster, cells = cell, directions = 8, pairs = FALSE)  # Vecinos 8-direccionales
neighbor_values <- values(raster)[neighbors]  # Valores de los vecinos
# Tomar el valor más frecuente entre los vecinos
neighbor_values <- neighbor_values[!is.na(neighbor_values)]  # Filtrar NA
if (length(neighbor_values) > 0) {
values(raster)[cell] <- as.numeric(names(sort(table(neighbor_values), decreasing = TRUE))[1])  # Moda
}
}
}
return(raster)
}
# Aplicar la función al raster
soil_filled_no_focal <- fill_na_nearest_no_focal(soil)
# Visualización
plot(soil_filled_no_focal, main = "Raster rellenado sin usar focal")
plot(cuenca, add = T)
soil_filled_no_focal
writeRaster(soil_filled_no_focal,"LAND_USE/LAND_USE_17S_cortado_filled.tif")
soil_type = raster("SOIL/SA_SOIL_17S_cortado.tif")
soil_type_filled <- fill_na_nearest_no_focal(soil_type)
plot(soil_filled)
plot(cuenca, add = T)
writeRaster(soil_filled_no_focal,"SOIL/SA_SOIL_17S_cortado__filled.tif")
